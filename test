# -*- coding: utf-8 -*-

import calendar

from datetime import timedelta
from dateutil.relativedelta import relativedelta
from odoo import api, fields, models, _
from odoo.exceptions import UserError



class ReportExpriyAbs(models.AbstractModel):
    _name = 'report.custom_expriy.ps_expriy_report'
    _description = 'expriy Details Report'


    # @api.model
    # def get_report_values(self, docids, data=None):
    #      docs = []
    #      print("doc_ids....",docids)
    #      print("data....", data)
    #      print("context....", self._context)
    #      print("this is  abu code")
    #      return {
    #          'doc_ids': data['ids'],
    #          'doc_model': data['model'],
    #
    #          'docs': docs,
    #      }

    def _testing(self,iq):
        res = []
        it = iq
        self.vone = "test"
        self.vtwo = "test1"
        res.append({'color': self.vone, 'name': self.vtwo})
        type_id = self.env['hr.expiry.details'].search([])
        #print(it)
        #print(res)
        return res


    @api.model
    def _get_report_values(self, docids, data=None):
        print("get report work abu")
        print("doc_ids....", docids)
        print("data....", data)
        print("context....", self._context)
        # data wizard
        # docs model val

        if not data.get('form'):
            raise UserError(_("Form content is missing, this report cannot be printed."))
        clause = []
        for key, val in data.items():
            print(key, "=>", val)
        print("finally i m run it")
        iq_report = self.env['ir.actions.report']._get_report_from_name('custom_expriy.ps_expriy_report')
        docs = self.env['hr.expiry.details'].browse(self.ids)
        #clause += self._get_search_from_state(data)
        #type_ids = self.env['hr.expiry.details'].search(clause)
        return {
            'doc_ids': self.ids,
            'doc_model': iq_report.model,
            'docs': docs,
         #   'type_ids': type_ids,
            'get_model':self.get_model(data),
            'get_employee':self.get_employee,
            'testing': self._testing(docs),
        }

    def get_model(self, data):
        record_ids = {}
        #env = api.Environment(self.cr, self.uid, self.localcontext)
        domain = []
        if len(data['form']['type']) > 0:
            domain += [('id', 'in', data['form']['type'])]
        record_ids = self.env['hr.expiry.details'].search(domain)
        print("get model work",record_ids.issue_date)
        return record_ids

    def get_employee(self, type, data):
        #env = api.Environment(self.cr, self.uid, self.localcontext)
        res = []

        self.vaone = "test"
        self.vatwo = "test1"

        res.append({'color': self.vaone, 'name': self.vatwo})

        domain = [('type', '=', type.id)]
        if data['form']['f_date']:
               domain += [('issue_date', '>=', data['form']['f_date'])]
        if data['form']['t_date']:
               domain += [('issue_date', '<=', data['form']['t_date'])]
        emp_iss = self.env['hr.expiry.details'].search(domain)
        print("get employee work", emp_iss)
        return emp_iss

        # if docs.state != 'all':
        #      search += [('date_from', '>=', docs.f_date), ('date_to', '<=', docs.t_date),
        #                    ('company_id', '=', docs.company_id[0]), ('state', '=', docs.state)]
        #return search


            # if not data.get('form'):
        #     raise UserError(_("Form content is missing, this report cannot be printed."))
        # wiz_expriy_report = self.env['ir.actions.report']._get_report_from_name('hr_holidays.report_holidayssummary')
        # wiz_expriy = self.env['hr.expiry.details'].browse(self.ids)
        # return {
        #     'doc_ids': self.ids,
        #     'doc_model': wiz_expriy_report,
        #     'docs': wiz_expriy,
        #     'testing': self._testing,  # You need to add this line
        # }
        #return  1

         #self.model = self.env.context.get('active_model')
         #docs = self.env[self.model].browse(self.env.context.get('active_id'))
         #

    #
    #     self.model = self.env.context.get('active_model')
    #     docs = self.env[self.model].browse(self.env.context.get('active_id'))
    #     clause = []
    #     sales_records = []
    #     orders = self.env['hr.payslip'].search([('company_id', '=', docs.company_id.id)])
        # if docs.date_from and docs.date_to:
        #     for order in orders:
        #         if parse(docs.date_from) <= parse(order.date_order) and parse(docs.date_to) >= parse(order.date_order):
        #             sales_records.append(order);
        # else:
        #     raise UserError("Please enter duration")
        # clause += self._get_search_from_state(docs)
        # clause += self._get_search_from_type(docs)
        # payslip_ids = self.env['hr.payslip'].search(clause)
        # if not payslip_ids:
        #     raise UserError('Null Data Record not found')
        #
        # #session_report = self.env['ir.actions.report']._get_report_from_name('payslip_report_xls_ps.report_payslip_ps')
        # return {
        #     'doc_ids': self.ids,
        #     'doc_model': self.model,
        #     'docs': docs,
        #     'time': time,
        #     'payslips': payslip_ids,
        #     'orders': sales_records,
        #     'case': self
        # }
    #
    #
    #
    # def _get_search_from_state(self, docs):
    #     search = [('date_from', '>=', docs.f_date),('date_to', '<=', docs.t_date),('company_id', '=', docs.company_id.id)]
    #     if docs.state != 'all':
    #         search += [('date_from', '>=', docs.f_date),('date_to', '<=', docs.t_date),('company_id', '=', docs.company_id[0]),('state', '=', docs.state)]
    #     return search
    #
    # def _get_search_from_type(self, docs):
    #     search = []
    #     if docs.type == 'without_refund':
    #         search += [('credit_note', '=', False)]
    #     elif docs.type == 'only_refund':
    #         search += [('credit_note', '=', True)]
    #     return search
    #
    # @api.multi
    # def get_rule(self,slip_id,rule):
    #     self._cr.execute("select total from hr_payslip_line where salary_rule_id in (select id from hr_salary_rule where code = '%s') and slip_id in (select id from hr_payslip where id = %s)" % (rule,slip_id))
    #     res = self._cr.fetchone()
    #     if res:
    #         return res[0]
    #     else:
    #         return 0.0
    #
    # @api.multi
    # def get_total(self,slip_id):
    #     total = 0
    #     rule_type = ['loan', 'hrdf', 'advance', 'gosi', 'other_deduction', 'absent']
    #     for r in rule_type:
    #         res = self.get_rule(slip_id,r)
    #         if res:
    #             total = total + res
    #         else:
    #             total = total
    #     return total
    #
    # @api.multi
    # def get_total_rule(self,rule,data):
    #     slip_obj = self.get_data(data)
    #     total = 0
    #     for slip_id in slip_obj:
    #         rule_amt = self.get_rule(slip_id.id,rule,data)
    #         if rule_amt != None:
    #             total = total + rule_amt
    #         else:
    #             total = total
    #     return total



 # @api.model
    # def get_report_values(self, docids, data=None):
    #      docs = []
    #      print("doc_ids....",docids)
    #      print("data....", data)
    #      print("context....", self._context)
    #      print("this is  abu code")
    #      return {
    #          'doc_ids': data['ids'],
    #          'doc_model': data['model'],
    #
    #          'docs': docs,
    #      }



        # if docs.state != 'all':
        #      search += [('date_from', '>=', docs.f_date), ('date_to', '<=', docs.t_date),
        #                    ('company_id', '=', docs.company_id[0]), ('state', '=', docs.state)]
        #return search


            # if not data.get('form'):
        #     raise UserError(_("Form content is missing, this report cannot be printed."))
        # wiz_expriy_report = self.env['ir.actions.report']._get_report_from_name('hr_holidays.report_holidayssummary')
        # wiz_expriy = self.env['hr.expiry.details'].browse(self.ids)
        # return {
        #     'doc_ids': self.ids,
        #     'doc_model': wiz_expriy_report,
        #     'docs': wiz_expriy,
        #     'testing': self._testing,  # You need to add this line
        # }
        #return  1

         #self.model = self.env.context.get('active_model')
         #docs = self.env[self.model].browse(self.env.context.get('active_id'))
         #

    #
    #     self.model = self.env.context.get('active_model')
    #     docs = self.env[self.model].browse(self.env.context.get('active_id'))
    #     clause = []
    #     sales_records = []
    #     orders = self.env['hr.payslip'].search([('company_id', '=', docs.company_id.id)])
        # if docs.date_from and docs.date_to:
        #     for order in orders:
        #         if parse(docs.date_from) <= parse(order.date_order) and parse(docs.date_to) >= parse(order.date_order):
        #             sales_records.append(order);
        # else:
        #     raise UserError("Please enter duration")
        # clause += self._get_search_from_state(docs)
        # clause += self._get_search_from_type(docs)
        # payslip_ids = self.env['hr.payslip'].search(clause)
        # if not payslip_ids:
        #     raise UserError('Null Data Record not found')
        #
        # #session_report = self.env['ir.actions.report']._get_report_from_name('payslip_report_xls_ps.report_payslip_ps')
        # return {
        #     'doc_ids': self.ids,
        #     'doc_model': self.model,
        #     'docs': docs,
        #     'time': time,
        #     'payslips': payslip_ids,
        #     'orders': sales_records,
        #     'case': self
        # }
    #
    #
    #
    # def _get_search_from_state(self, docs):
    #     search = [('date_from', '>=', docs.f_date),('date_to', '<=', docs.t_date),('company_id', '=', docs.company_id.id)]
    #     if docs.state != 'all':
    #         search += [('date_from', '>=', docs.f_date),('date_to', '<=', docs.t_date),('company_id', '=', docs.company_id[0]),('state', '=', docs.state)]
    #     return search
    #
    # def _get_search_from_type(self, docs):
    #     search = []
    #     if docs.type == 'without_refund':
    #         search += [('credit_note', '=', False)]
    #     elif docs.type == 'only_refund':
    #         search += [('credit_note', '=', True)]
    #     return search
    #
    # @api.multi
    # def get_rule(self,slip_id,rule):
    #     self._cr.execute("select total from hr_payslip_line where salary_rule_id in (select id from hr_salary_rule where code = '%s') and slip_id in (select id from hr_payslip where id = %s)" % (rule,slip_id))
    #     res = self._cr.fetchone()
    #     if res:
    #         return res[0]
    #     else:
    #         return 0.0
    #
    # @api.multi
    # def get_total(self,slip_id):
    #     total = 0
    #     rule_type = ['loan', 'hrdf', 'advance', 'gosi', 'other_deduction', 'absent']
    #     for r in rule_type:
    #         res = self.get_rule(slip_id,r)
    #         if res:
    #             total = total + res
    #         else:
    #             total = total
    #     return total
    #
    # @api.multi
    # def get_total_rule(self,rule,data):
    #     slip_obj = self.get_data(data)
    #     total = 0
    #     for slip_id in slip_obj:
    #         rule_amt = self.get_rule(slip_id.id,rule,data)
    #         if rule_amt != None:
    #             total = total + rule_amt
    #         else:
    #             total = total
    #     return total



        self.vaone = "test"
        self.vatwo = "test1"

        res.append({'color': self.vaone, 'name': self.vatwo})

